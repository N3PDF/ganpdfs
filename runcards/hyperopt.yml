#############################################################################################
# Input PDF                                                                                 #
#############################################################################################
pdf: 210127-n3fit-001

#############################################################################################
# PDF Grids:                                                                                #
# ---------                                                                                 #
# * Inittial scale q (in GeV)                                                               #
# * Options for x-grid:                                                                     #
#   - custom: Custom GANs xgrid as defined in the Module                                    #
#   - lhapdf: Use the same xgrid as in the input PDF                                        #
#############################################################################################
q        : 1.65                                                                                 # Initial q0 value (in GeV)
x_grid   : standard                                                                             # x-grid format. Options: standard, custom, lhapdf

use_saved_model : False                                                                         # Skip training and use pre-trained generator model
                                                                                                # All the parameters below will be skipped is set to TRUE
ConvoluteOutput : False

architecture    : cnn                                                                           # Architecture model. Options: cnn, dnn

hyperopt:
  #############################################################################################
  # GAN setup:                                                                                #
  # ---------                                                                                 #
  # * Options for architecture:                                                               #
  #   - dnn : Deep Neural Network                                                             #
  #   - dcnn: Deep Convolutional Neural Network                                               #
  #############################################################################################
  gan_parameters:
    optimizer:
      optimizer_name    : hp.choice('gan_opt', ['RMSprop'])                                     # options: SGD, Adam, RMSprop, Adadelta
      learning_rate     : hp.choice('gan_lr', [0.00005, 0.0005])                                # Learning rate for the optimizer class

  gen_parameters:
    size_networks       : hp.choice('g_nn', [1, 2])                                             # number of hidden layers
    kernel_initializer  : hp.choice('g_kini', ['GlorotUniform', 'RandomUniform'])               # list of initializer classes: https://keras.io/api/layers/initializers/

  disc_parameters:
    size_networks       : hp.choice('d_nn', [1, 2])                                             # number of hidden layers
    number_nodes        : hp.choice('d_nodes', [200, 400, 600, 1000])                           # number of nodes in the first layer
    kernel_initializer  : hp.choice('d_kini', ['GlorotUniform', 'RandomUniform'])               # list of initializer classes: https://keras.io/api/layers/initializers/
    weights_constraints : hp.choice('d_wc', [0.01, 0.1])                                        # Constrain weights values
    optimizer:
      optimizer_name    : hp.choice('d_opt', ['RMSprop'])                                       # options: SGD, Adam, RMSprop, Adadelta
      learning_rate     : hp.choice('d_lr', [0.00005, 0.0005])                                  # Learning rate for the optimizer class
    activation          : hp.choice('d_act', ['relu', 'elu', 'leakyrelu'])                      # options: relu, leakyrelu, elu
    trainable           : hp.choice('d_train', [True, False])


  #############################################################################################
  # Training Setup:                                                                           #
  # --------------                                                                            #
  # * batch size                                                                              #
  # * {i}_steps: number of steps to train a {i}={generator, discriminator/critic} at each     #
  #   iteration.                                                                              #
  #############################################################################################
  nd_steps   : hp.choice('nd_steps', [2, 3, 4])                                                 # Number of steps to train the Discriminator for one training run
  ng_steps   : hp.choice('ng_steps', [1, 2, 3])                                                 # Number of steps to train the Discriminator for one training run
  batch_size : hp.choice('batch_size', [40, 70])                                                # Batch size per epoch in terms of percentage
  epochs     : hp.choice('epochs', [1000, 1500, 2000])                                          # Number of epochs
